# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values
# do not exceed four million, find the sum of the even-valued terms

# Solution: 4613732

from time import time


def fib(n):  # w/ memoization
    fibs = [1, 2]
    nextFib = 3
    while (nextFib < n):
        fibs.append(nextFib)
        nextFib = sum(fibs[-2:])
    return fibs


def main():
    start = time()
    x = sum(filter(lambda x: x % 2 == 0, fib(4000000)))
    end = time()
    print("runtime: {0}s\nsolution: {1}".format(end-start, x))


if __name__ == '__main__':
    main()
